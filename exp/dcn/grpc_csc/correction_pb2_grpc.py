# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import correction_pb2 as correction__pb2


class CorrectionStub(object):
    """service里预定义服务有哪些函数可以调用
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ask = channel.unary_unary(
                '/correction.Correction/ask',
                request_serializer=correction__pb2.Key.SerializeToString,
                response_deserializer=correction__pb2.Response.FromString,
                )
        self.remember = channel.unary_unary(
                '/correction.Correction/remember',
                request_serializer=correction__pb2.Item.SerializeToString,
                response_deserializer=correction__pb2.Response.FromString,
                )


class CorrectionServicer(object):
    """service里预定义服务有哪些函数可以调用
    """

    def ask(self, request, context):
        """函数格式： rpc 函数名 (输入变量) returns (输出变量) {}
        变量都要在下面用 message 来定义了才能用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CorrectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ask': grpc.unary_unary_rpc_method_handler(
                    servicer.ask,
                    request_deserializer=correction__pb2.Key.FromString,
                    response_serializer=correction__pb2.Response.SerializeToString,
            ),
            'remember': grpc.unary_unary_rpc_method_handler(
                    servicer.remember,
                    request_deserializer=correction__pb2.Item.FromString,
                    response_serializer=correction__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'correction.Correction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Correction(object):
    """service里预定义服务有哪些函数可以调用
    """

    @staticmethod
    def ask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/correction.Correction/ask',
            correction__pb2.Key.SerializeToString,
            correction__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/correction.Correction/remember',
            correction__pb2.Item.SerializeToString,
            correction__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
